import pandas as pd
import numpy as np

# Function to reconstruct the synthetic data into readable text format
def reconstruct_and_generate_synthetic_text(synth_data, label_encoders, scaler, expected_columns):
    """
    Reconstruct synthetic data and convert it into readable text format.
    
    Args:
        synth_data (np.ndarray): Synthetic data generated by the model.
        label_encoders (dict): Label encoders for categorical columns.
        scaler (MinMaxScaler): Scaler used for normalization.
        expected_columns (list): Expected column names for the reconstructed data.
    
    Returns:
        reconstructed_text (dict): Dictionary of synthetic text (name, email, phone, etc.).
    """
    # Inverse scale the numerical columns
    reconstructed_data = scaler.inverse_transform(synth_data)

    # Ensure the correct column names are assigned
    reconstructed_df = pd.DataFrame(reconstructed_data, columns=expected_columns)

    # Revert categorical columns using label encoders
    for column, encoder in label_encoders.items():
        if encoder is not None and column in reconstructed_df:
            reconstructed_df[column] = encoder.inverse_transform(reconstructed_df[column].round().astype(int))

    # Reconstruct synthetic data into text format
    reconstructed_text = {
        'name': reconstructed_df['I-GIVENNAME'][0] + ' ' + reconstructed_df['I-SURNAME'][0],
        'email': reconstructed_df['I-EMAIL'][0],
        'phone': str(int(reconstructed_df['I-TELEPHONENUM'][0])),
        # Add other fields if needed
    }

    return reconstructed_text


# Function to replace personal information in text with synthetic data
def replace_personal_info_with_fake_data(text, ner_model, synth_data, label_encoders, scaler, expected_columns):
    """Replace personal information in text with synthetic data."""
    
    # Use the NER model to extract personal information entities from the text
    entities = ner_model(text)
    
    # Reconstruct synthetic data into readable text
    synthetic_data = reconstruct_and_generate_synthetic_text(synth_data, label_encoders, scaler, expected_columns)

    # Replace the identified entities with synthetic data
    for entity in entities:
        label = entity['entity']
        start = entity['start']
        end = entity['end']
        
        # Replace personal information with synthetic data
        if label == 'I-GIVENNAME' or label == 'I-SURNAME':  # If the label is a name
            name = synthetic_data['name']
            text = text[:start] + name + text[end:]
        elif label == 'I-EMAIL':  # If the label is an email
            email = synthetic_data['email']
            text = text[:start] + email + text[end:]
        elif label == 'I-TELEPHONENUM':  # If the label is a phone number
            phone = synthetic_data['phone']
            text = text[:start] + phone + text[end:]
    
    return text

# Example Input Sentence
input_sentence = "My name is Manaswini Kosuri, my email is manaswini097@gmail.com, and my phone number is 9381660498."

# Example: NER model output (You can replace this with the output from your actual NER model)
ner_model_output = [
    {'entity': 'I-GIVENNAME', 'start': 11, 'end': 21},
    {'entity': 'I-SURNAME', 'start': 22, 'end': 30},
    {'entity': 'I-EMAIL', 'start': 39, 'end': 65},
    {'entity': 'I-TELEPHONENUM', 'start': 82, 'end': 95}
]

# Example Synthetic Data (from PATE-GAN model)
synth_data = np.array([[0.1, 0.2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]])

# Label Encoders and Scaler (Replace with your actual label encoders and scaler)
label_encoders = {
    'I-GIVENNAME': None,  # Replace with actual encoders if used
    'I-SURNAME': None,
    'I-EMAIL': None,
    'I-TELEPHONENUM': None
}
scaler = None  # Replace with your actual scaler if used
expected_columns = [
    'I-ACCOUNTNUM', 'I-BUILDINGNUM', 'I-CITY', 'I-CREDITCARDNUMBER', 'I-DATEOFBIRTH',
    'I-DRIVERLICENSENUM', 'I-EMAIL', 'I-GIVENNAME', 'I-IDCARDNUM', 'I-PASSWORD', 
    'I-SOCIALNUM', 'I-STREET', 'I-SURNAME', 'I-TAXNUM', 'I-TELEPHONENUM', 'I-USERNAME', 'I-ZIPCODE'
]

# Replace the identified labels in the input sentence with synthetic data
output_sentence = replace_personal_info_with_fake_data(input_sentence, ner_model_output, synth_data, label_encoders, scaler, expected_columns)

print("Original Text: ", input_sentence)
print("Redacted Text: ", output_sentence)
